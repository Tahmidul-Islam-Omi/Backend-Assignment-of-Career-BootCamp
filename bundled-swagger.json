{
  "openapi": "3.0.0",
  "info": {
    "title": "Todo API",
    "version": "1.0.0",
    "description": "A simple Todo API with authentication",
    "contact": {
      "name": "API Support",
      "email": "support@todoapp.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Todo": {
        "type": "object",
        "required": [
          "title",
          "user_id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The auto-generated id of the todo"
          },
          "title": {
            "type": "string",
            "description": "The title of the todo"
          },
          "description": {
            "type": "string",
            "description": "The description of the todo"
          },
          "completed": {
            "type": "boolean",
            "description": "Whether the todo is completed",
            "default": false
          },
          "user_id": {
            "type": "integer",
            "description": "The id of the user who owns this todo"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the todo was created"
          }
        },
        "example": {
          "id": 1,
          "title": "Complete project",
          "description": "Finish the todo app project",
          "completed": false,
          "user_id": 1,
          "created_at": "2023-06-01T12:00:00Z"
        }
      },
      "User": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The auto-generated id of the user"
          },
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "description": "The hashed password of the user"
          }
        },
        "example": {
          "id": 1,
          "name": "John Doe",
          "email": "john@example.com"
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The auto-generated id of the refresh token"
          },
          "user_id": {
            "type": "integer",
            "description": "The id of the user who owns this token"
          },
          "token": {
            "type": "string",
            "description": "The refresh token string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration date of the token"
          }
        },
        "example": {
          "id": 1,
          "user_id": 1,
          "token": "a1b2c3d4e5f6g7h8i9j0",
          "expires_at": "2023-06-08T12:00:00Z"
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "example": {
          "error": "Internal server error"
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "example": {
          "email": "user@example.com",
          "password": "password123"
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "example": {
          "name": "John Doe",
          "email": "user@example.com",
          "password": "password123"
        }
      },
      "TodoRequest": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          }
        },
        "example": {
          "title": "Buy groceries",
          "description": "Milk, eggs, bread",
          "completed": false
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "User does not have access to the resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "example": {
                  "name": "John Doe",
                  "email": "john@example.com",
                  "password": "password123"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "accessToken": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login a user",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "example": {
                  "email": "john@example.com",
                  "password": "password123"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "accessToken": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Logout a user",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "summary": "Refresh access token",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access token generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "info": {
      "title": "Todo API",
      "description": "This is a RESTful API for a Todo application with user authentication.\n\n## Features\n\n- User registration and authentication\n- JWT-based authentication with refresh tokens\n- CRUD operations for todos\n- Secure password storage with bcrypt\n\n## Authentication\n\nThe API uses JWT for authentication. To access protected endpoints, you need to:\n\n1. Register a new user or login with existing credentials\n2. Use the returned access token in the Authorization header as a Bearer token\n3. When the access token expires, use the refresh token to get a new one\n",
      "version": "1.0.0",
      "contact": {
        "name": "API Support",
        "email": "tahmidulislamomi09@gmail.com"
      }
    },
    "servers": {
      "0": {
        "url": "http://localhost:3001",
        "description": "Development server"
      }
    },
    "/api/todos": {
      "get": {
        "summary": "Get all todos for the authenticated user",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of todos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Todo"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Create a new todo",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "example": {
                  "title": "Buy groceries",
                  "description": "Milk, eggs, bread"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Todo created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/todos/{id}": {
      "get": {
        "summary": "Get a todo by ID",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Todo ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Todo details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Todo not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Update a todo",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Todo ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "completed": {
                    "type": "boolean"
                  }
                },
                "example": {
                  "title": "Buy groceries",
                  "description": "Milk, eggs, bread, cheese",
                  "completed": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Todo updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Todo not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a todo",
        "tags": [
          "Todos"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Todo ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Todo deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Todo not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Todos",
      "description": "Todo management endpoints"
    }
  ]
}
